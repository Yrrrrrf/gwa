import os
import uvicorn
from fastapi import FastAPI

# (Updated) Imports are now more explicit, following the new examples.
from prism.db.client import DbClient
from prism.prism import ApiPrism

# * read directly from the environment variables
# todo: Check if these environment variables are set before using them
# todo: Check where does this values are get from!
# todo: * Handle a way to manage the {{ placeholders }} from cargo-generate!
# todo: * Handle a way to manage the {{ placeholders }} from cargo-generate!
# todo: * Handle a way to manage the {{ placeholders }} from cargo-generate!
db = os.getenv("DB_NAME", "gwa")
user = os.getenv("DB_OWNER_ADMIN", "gwa_owner")
password = os.getenv("DB_OWNER_PWORD", "password")
host = os.getenv("DB_HOST", "localhost")
port = os.getenv("DB_PORT", "5432")

# (New) It's good practice to ensure required variables are set.
if not all([db, user, password, host, port]):
    raise ValueError("One or more required database environment variables are not set.")

# (Updated) The old `PrismConfig` is gone. API metadata is now passed directly
# to the FastAPI app instance, which is a more standard approach.
app = FastAPI(
    title=f"{db.upper()} Hub",
    version="0.1.0",
    description="API automatically generated by the prism-py library.",
)

# (Updated) The DbClient now takes a single database URL string.
# The complex DbConfig and PoolConfig objects are no longer needed for initialization.
DATABASE_URL = f"postgresql://{user}:{password}@{host}:{port}/{db}"

# Database connection setup
db_client = DbClient(db_url=DATABASE_URL)

# (Updated) `test_connection()` is called automatically on init.
# `log_connection_stats()` is the new method for displaying detailed connection info.
# The old `log_metadata_stats()` is replaced by a method on the cache manager.
db_client.log_connection_stats()

# (Updated) The `ModelManager` has been removed.
# You now pass the list of schemas directly to the ApiPrism constructor.
schemas_to_include = [
    "public",
    "account",
    "auth",
]

# Initialize API generator
api_prism = ApiPrism(
    db_client=db_client,
    app=app,
    schemas=schemas_to_include,  # Pass schemas here
)

# (Updated) The `gen_*` methods no longer take `model_manager` as an argument.
# They use the internal cache that was populated when ApiPrism was initialized.
# You can call them individually or use the new `gen_all_routes()` helper.

# --- Option A: Generate all routes with a single command (Recommended) ---
api_prism.gen_all_routes()

# --- Option B: Generate routes modularly (like your original script) ---
# api_prism.gen_metadata_routes()
# api_prism.gen_health_routes()
# api_prism.gen_table_routes()
# api_prism.gen_view_routes()
# api_prism.gen_fn_routes()

# (Updated) Display database statistics using the new cache manager.
# This replaces `model_manager.log_metadata_stats()`.
api_prism.cache.log_stats()

# (Updated) The welcome message function is renamed to `print_welcome_message`
# and now takes host and port for generating clickable doc links.
server_host = "127.0.0.1"
server_port = 8000
api_prism.print_welcome_message(host=server_host, port=server_port)
print()

# (New) Standard Uvicorn runner to make the script executable.
if __name__ == "__main__":
    print(f"ðŸš€ Starting server at http://{server_host}:{server_port}")
    print("   Press CTRL+C to stop.")
    uvicorn.run(
        "__main__:app", # Use "__main__" to run this script directly
        host=server_host,
        port=server_port,
        reload=True,
    )